import { MediaStreamTrack, RTCPeerConnection, RtpPacket } from "werift";
import got from "got";
import * as yargs from "yargs";
import { setTimeout } from "timers/promises";

const TestType = { PeerConnection: 0, DataChannelEcho: 1 };

const args = yargs
  .option("s", {
    default:
      process.argv.length === 3
        ? process.argv[2] || "http://localhost:8080/offer"
        : "http://localhost:8080/offer",
  })
  .option("t", {
    default: TestType.PeerConnection,
  })
  .help().argv;
const url = args["s"];
const testType = args["t"];
console.log(args, { url, testType });

new Promise<void>(async (done, failed) => {
  setTimeout(60_000).then(failed);

  const pc = new RTCPeerConnection({
    iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
  });
  const senderTrack = new MediaStreamTrack({ kind: "video" });
  const transceiver = pc.addTransceiver(senderTrack);
  transceiver.onTrack.once((track) => {
    track.onReceiveRtp.subscribe((rtp) => {
      console.log("Received echoed back rtp", rtp.header);
      if (testType === TestType.PeerConnection) {
        done();
      }
    });
  });

  if (testType === TestType.DataChannelEcho) {
    const pseudo = Math.random().toString().slice(2, 7);
    const dc = pc.createDataChannel("werift-dc");
    dc.onopen = () => {
      dc.send(pseudo);
    };
    dc.message.subscribe((msg) => {
      console.log("data channel onmessage");
      if (msg === pseudo) {
        console.log("Data channel echo test success.");
        if (testType === TestType.DataChannelEcho) {
          done();
        }
      }
    });
  }

  await pc.setLocalDescription(await pc.createOffer());
  console.log("local offer ", pc.localDescription?.sdp);
  const data = await got
    .post(url, {
      json: pc.localDescription,
      retry: { limit: 5, methods: ["POST"] },
    })
    .json<any>()
    .catch(failed);
  console.log("server answer sdp", data?.sdp);
  pc.setRemoteDescription(data);

  await pc.connectionStateChange.watch((state) => state === "connected");

  if (testType === TestType.PeerConnection) {
    if (transceiver.receiver.tracks.length === 0) {
      console.log("remoteTrack not found");
      done();
      return;
    }

    setInterval(() => {
      const payloadType = transceiver.getPayloadType("vp8")!;
      const rtp = RtpPacket.deSerialize(vp8RtpBinary);
      rtp.header.payloadType = payloadType;
      senderTrack.writeRtp(rtp);
    }, 100);
  }
})
  .then(() => {
    console.log("interop done");
    process.exit(0);
  })
  .catch((e) => {
    console.log("interop failed", e);
    process.exit(1);
  });

const vp8RtpBinary = Buffer.from([
  128, 98, 12, 15, 201, 127, 133, 254, 154, 16, 189, 196, 144, 128, 132, 246,
  16, 168, 0, 157, 1, 42, 128, 2, 224, 1, 57, 107, 0, 37, 28, 34, 22, 22, 34,
  102, 18, 32, 212, 14, 239, 198, 59, 214, 246, 107, 11, 209, 39, 132, 231, 227,
  112, 140, 241, 119, 175, 216, 189, 57, 250, 48, 100, 120, 13, 190, 47, 79,
  166, 78, 193, 80, 130, 164, 213, 60, 241, 202, 244, 56, 113, 221, 190, 114,
  134, 137, 226, 19, 83, 214, 60, 194, 146, 69, 254, 63, 189, 229, 228, 204, 37,
  2, 189, 176, 117, 114, 248, 231, 39, 77, 70, 114, 16, 121, 4, 22, 145, 15, 75,
  182, 109, 1, 60, 82, 94, 53, 187, 110, 67, 249, 251, 171, 233, 194, 244, 197,
  184, 187, 76, 92, 86, 125, 233, 230, 24, 87, 174, 198, 47, 100, 31, 151, 184,
  223, 44, 24, 208, 169, 22, 12, 203, 211, 154, 103, 77, 117, 123, 15, 150, 124,
  152, 4, 142, 180, 232, 193, 73, 71, 179, 138, 143, 139, 103, 196, 182, 96,
  233, 120, 38, 226, 94, 227, 237, 141, 92, 168, 208, 24, 4, 113, 38, 35, 87,
  190, 187, 24, 189, 148, 38, 167, 168, 155, 30, 0, 92, 95, 68, 66, 38, 79, 54,
  145, 125, 22, 75, 148, 230, 236, 196, 180, 166, 141, 99, 204, 44, 236, 110,
  165, 30, 201, 60, 96, 206, 85, 254, 77, 253, 14, 153, 158, 5, 95, 64, 41, 40,
  105, 26, 69, 105, 209, 118, 49, 103, 99, 23, 178, 132, 212, 230, 201, 107,
  188, 115, 45, 43, 180, 236, 121, 215, 150, 129, 4, 216, 166, 247, 37, 186,
  148, 21, 154, 211, 126, 60, 194, 206, 198, 47, 100, 31, 36, 72, 253, 222, 203,
  101, 78, 246, 119, 141, 27, 48, 224, 158, 176, 142, 169, 176, 150, 123, 224,
  248, 24, 213, 233, 135, 44, 157, 183, 254, 121, 29, 133, 212, 99, 155, 61, 72,
  193, 255, 236, 228, 61, 214, 200, 102, 181, 186, 175, 198, 236, 41, 189, 127,
  209, 248, 158, 106, 103, 37, 170, 61, 67, 230, 207, 175, 124, 227, 151, 190,
  113, 203, 236, 229, 38, 81, 160, 253, 226, 223, 217, 66, 7, 195, 170, 109,
  204, 94, 11, 252, 8, 129, 96, 39, 107, 190, 228, 77, 155, 22, 252, 128, 22,
  98, 188, 183, 75, 217, 80, 11, 149, 212, 12, 38, 98, 239, 93, 96, 149, 105,
  208, 202, 199, 0, 155, 99, 203, 248, 104, 111, 40, 23, 46, 144, 238, 178, 55,
  8, 224, 76, 66, 73, 30, 199, 48, 215, 152, 89, 214, 40, 247, 52, 232, 146,
  121, 205, 182, 74, 12, 37, 124, 207, 40, 143, 173, 35, 236, 147, 118, 144,
  241, 68, 6, 118, 212, 120, 158, 132, 11, 117, 226, 72, 49, 206, 166, 221, 147,
  80, 120, 166, 186, 121, 230, 110, 5, 165, 247, 149, 255, 234, 145, 61, 177, 5,
  95, 56, 44, 22, 133, 145, 192, 5, 90, 47, 36, 199, 152, 112, 52, 192, 58, 148,
  194, 157, 246, 203, 11, 67, 202, 124, 79, 67, 202, 202, 184, 207, 164, 128,
  100, 159, 88, 22, 139, 27, 62, 86, 184, 215, 144, 7, 37, 71, 36, 184, 69, 81,
  203, 149, 167, 156, 142, 82, 157, 6, 164, 14, 148, 217, 145, 233, 219, 196, 5,
  243, 31, 101, 187, 116, 40, 8, 101, 38, 28, 65, 215, 128, 5, 34, 77, 176, 26,
  192, 18, 167, 229, 14, 234, 197, 157, 73, 175, 133, 46, 100, 187, 139, 10, 95,
  175, 60, 124, 147, 224, 11, 207, 195, 241, 252, 94, 215, 46, 69, 62, 87, 160,
  146, 15, 243, 151, 52, 175, 55, 76, 74, 126, 33, 198, 158, 151, 174, 246, 139,
  253, 106, 254, 197, 214, 238, 183, 53, 141, 79, 227, 237, 186, 18, 131, 10,
  172, 159, 40, 27, 103, 113, 220, 160, 62, 52, 108, 155, 7, 250, 105, 130, 24,
  154, 108, 34, 153, 243, 191, 78, 251, 219, 220, 248, 118, 33, 118, 195, 148,
  111, 121, 185, 239, 55, 219, 150, 150, 173, 60, 109, 18, 244, 99, 21, 168,
  187, 223, 233, 178, 141, 87, 149, 119, 74, 97, 167, 88, 40, 239, 2, 205, 24,
  144, 64, 173, 48, 125, 11, 88, 130, 166, 112, 211, 85, 178, 76, 213, 236, 120,
  222, 134, 213, 20, 82, 166, 136, 155, 185, 219, 190, 135, 205, 176, 216, 29,
  182, 55, 126, 10, 49, 122, 221, 205, 190, 225, 141, 254, 104, 178, 207, 187,
  65, 171, 55, 116, 243, 11, 67, 202, 124, 76, 135, 164, 67, 137, 108, 186, 64,
  157, 143, 184, 174, 133, 136, 110, 53, 194, 181, 148, 74, 20, 48, 59, 130,
  115, 139, 10, 20, 106, 127, 20, 172, 103, 110, 115, 224, 20, 128, 133, 193,
  222, 20, 122, 235, 74, 179, 100, 16, 125, 23, 9, 126, 190, 222, 129, 165, 147,
  66, 26, 162, 245, 23, 241, 232, 89, 216, 197, 9, 166, 206, 243, 137, 181, 151,
  168, 180, 168, 5, 172, 119, 6, 19, 235, 180, 150, 52, 16, 212, 230, 165, 229,
  201, 119, 230, 49, 220, 12, 19, 53, 58, 98, 93, 139, 62, 42, 193, 28, 17, 127,
  242, 195, 85, 252, 50, 115, 91, 173, 47, 157, 172, 25, 114, 182, 231, 160,
  244, 44, 109, 247, 141, 215, 107, 112, 240, 20, 44, 236, 98, 144, 46, 78, 154,
  21, 202, 9, 233, 36, 91, 192, 74, 218, 73, 191, 19, 110, 105, 240, 35, 246,
  207, 153, 88, 153, 99, 45, 22, 184, 227, 145, 171, 15, 101, 243, 132, 201,
  203, 23, 234, 74, 211, 54, 149, 192, 255, 31, 89, 158, 19, 167, 152, 109, 213,
  72, 69, 180, 178, 105, 230, 36, 18, 182, 234, 134, 245, 90, 90, 10, 60, 23,
  57, 100, 178, 234, 87, 150, 185, 88, 187, 70, 202, 238, 224, 44, 129, 102,
  160, 76, 210, 175, 51, 28, 241, 9, 89, 144, 46, 91, 73, 208, 6, 127, 237, 58,
  111, 48, 81, 252, 162, 106, 142, 164, 17, 22, 152, 216, 147, 197, 96, 113,
  216, 142, 84, 120, 45, 254, 243, 252, 62, 55, 6, 46, 45, 52, 241, 10, 138, 17,
  67, 140, 89, 142, 42, 149, 176, 149, 151, 87, 192, 48, 167, 250, 73, 7, 47,
  74, 232, 72, 238, 136, 243, 238, 206, 15, 243, 39, 249, 132, 227, 170, 176,
  173, 97, 169, 237, 16, 223, 147, 77, 248, 243, 10, 59, 93, 163, 43, 244, 18,
  10, 2, 141, 178, 236, 177, 27, 152, 128, 158, 76, 13, 58, 188, 184, 83, 255,
  238, 204, 241, 88, 198, 125, 189, 147, 131, 61, 34, 232, 45, 171, 218, 105,
  247, 35, 140, 89, 145, 238, 119, 196, 134, 103, 24, 151, 119, 214, 69, 155,
  216, 109, 77, 39, 113, 69, 218, 159, 53, 8, 70, 205, 36, 50, 41, 125, 201,
  201, 191, 158, 33, 169, 123, 134, 199, 88, 154, 2, 30, 107, 31, 193,
]);
